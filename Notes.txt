Idea short:
    Create a website for tracking how many hours a user has played certain games

Idea long:
    Create a website to display a game to show how many active players there have been in a given time. On the website, users can also track how many hours they have in games in their library. 
    Users can add games to their library to start tracking how many hours they have played the given game. 
    The website will reward players with awards for playing games for a certain amount of time.

---------------------------------------------

Core:
    - User:
        - User can create account
        - User can log in to their account
        - User can delete their account
        - User can add a game to their library
        - User can add hours to the given game
            - Get the game activity: When the user started a game and how long the user has played the game
        - User can view the game information
        - User can view their game library

    - Admin
        - Admin can remove account
        - Admin can view account
            - Display account's game library
            - Display account's game activity
            
    - Website
        - The website displays the games in the user's library
        - The website displays how many hours the user has on a given game

Extra:
    - Website:
        - The website rewards the user awards for reaching certain hours in a given game
        - The website displays the most played games on the homepage
        - The website tracks active players of the given game

---------------------------------------------

User stories:
    US-01:
        As a user, I want to be able to create an account, so I will be able to use the website
    US-02:
        As a user, I want to be able to log in to my account, so I can display my game library, so I can see which games I own, and how much time I've spend playing those games
    US-03:
        As a user, I want to be able to add a game to my library, so I can start tracking my activity playing games
    US-04:
        As a user, I want to be able to display my activity in a given game, so I can keep track how many hours I've spend playing that game
    US-05:
        As a user, I want to be able to delete my account, so that I don't have to use this service anymore
    US-06:
        As an admin, I want to be able to display a given user's library, so I can check if all data is properly stored and there are no invalid game times
    US-07:
        As an admin, I want to be able to remove an user's account, so I can remove invalid accounts

---------------------------------------------

Use cases:

    UC-01: As a user, I want to be able to create an account, so I will be able to use the website

        Stakeholders and interests:
            - User: Wants to be able to create an account, so they can start to track their game activity

        Preconditions:
            - Website is active
            - Database is running and connected

        Success Guarantee (Postconditions):
            - New account is created and added to the database
            - User can now log in to their account

        Main Success Scenario (Basic Flow):
            - User selects the register button
            - User fills in their account information
            - The data gets added to the database
            - The user can log in to their account now

        Extensions (Alternative Path):
            - The data fails to get added to the database
            - The user has to update the information of the account

        Serial Requirements:
            - None

        Technology and Data Variation List:
            - None

    UC-02: As a user, I want to be able to log in to my account, so I can display my game library, so I can see which games I own, and how much time I've spend playing those games

        Stakeholders and interests:
            - User: Wants to be able to login into their account, so they can display their library and view their current game times

        Preconditions:
            - Website is active
            - Database is running and connected
            - User has created an account and that account is valid

        Success Guarantee (Postconditions):
            - User has logged in to their account
            - User has received all information of the account from the database

        Main Success Scenario (Basic Flow):
            - User fills in their information into the required fields
            - User selects the login button
            - The data gets sent to the service, and compares it to what it has stored in the database
            - The service sends the user that they have logged in succesfully, with their data from the database
            - The user's screen moves to the library screen

        Extensions (Alternative Path):
            - The data that the service got doesn't exist, or doesn't match up with the database

        Serial Requirements:
            - None

        Technology and Data Variation List:
            - None

---------------------------------------------

Database:

Account:
    - Integer (Primary Key, Unique, Auto Incr) UserID
    - String (Unique) Username
    - String EMailAddress
    - String PasswordSalt
    - String passwordHash
    - Integer (default 1) AdminLevel

Account Library:
    - Integer UserID
    - Integer GameID
    - Time GameAquired
    - Time GameLastPlayed
    - Time GamePlayTime

Game:
    - Integer (Primary Key, Unique, Auto Incr) gameID
    - String gameName

---------------------------------------------

Classes: 
    - Account Manager
        - Variables
            - Accounts (List of Account Account List)
        - Functions
            - Create Account (String {Username}, String {E-Mail Address}, String {Password})
            - Update Account (String {Username}, List of Game {Game List})
            - Remove Account (String {Username})

    - Account
        - Master
            - Variables
                - Username (String)
                - Password (String)
        - User
            - Variables
                - Gamelibrary (List of Game)            
            - Functions
                - Add Game (Game {Game To Add})
                - Update Game (Time {New Time})
        - Admin

    - Game Manager
        - Variables
            - Game List (List of Game {Game})
        - Functions
            - Get Game (String {Game Title})
            - Add Game (Game {New Game})

    - Game
        - Variables
            - Game Title (String {Game Title})
            - Game Time (Time {Play Time})
        - Functions
            - Set Game Time (Time {New Time})

    - Connection Handler
        - Master
            - Variables
                Is Connected (Boolean)
            - Functions
                - Start Connection
                - Stop Connection
                - Create Account (String Username, String E-Mail Address, String Password)
                - Update Account (String Username)
                - Remove Account (String Username)
        - SQL Connection
            - Variables
                - Database Name (String)
                - Database Address (String)
                - Database Port (Integer)
                - Database User (String)
                - Database Password (String)
                - Database Root Password (String)
            - Functions
